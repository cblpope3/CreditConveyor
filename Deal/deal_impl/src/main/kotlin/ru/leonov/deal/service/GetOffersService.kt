package ru.leonov.deal.service

import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import ru.leonov.deal.client.ConveyorAppClient
import ru.leonov.deal.dto.LoanApplicationRequestDTO
import ru.leonov.deal.dto.LoanOfferDTO
import ru.leonov.deal.mapper.loanRequestToClient
import ru.leonov.deal.model.entity.ClientEntity
import ru.leonov.deal.repository.ApplicationRepository
import ru.leonov.deal.repository.ClientRepository
import ru.leonov.deal.utility.createNewApplication
import java.math.BigDecimal
import java.util.function.Consumer

/**
 * Service that handle loan application requests.
 */
@Service
class GetOffersService(
    @Autowired val conveyorAppClient: ConveyorAppClient,
    @Autowired val clientRepository: ClientRepository,
    @Autowired val applicationRepository: ApplicationRepository
) {

    private val log = KotlinLogging.logger {}

    /**
     * Make credit offers list from loan application request.
     *
     * @param loanApplicationRequestDTO user's request.
     * @return credit offers generated by Conveyor-App.
     */
    fun getOffers(loanApplicationRequestDTO: LoanApplicationRequestDTO): List<LoanOfferDTO> {

        // 1.	По API приходит LoanApplicationRequestDTO
        // 2.	На основе LoanApplicationRequestDTO создаётся сущность Client и сохраняется в БД.
        val newClient = saveNewClientToDatabase(loanApplicationRequestDTO)
        log.trace { "New client #${newClient.id} saved to database." }

        // 3.	Создаётся Application со связью на только что созданный Client и сохраняется в БД.
        val newApplicationId = saveNewApplicationToDatabase(newClient)
        log.trace { "Application #$newApplicationId saved." }

        // 4.	Отправляется POST запрос на /conveyor/offers МС conveyor через FeignClient
        // (здесь и далее вместо FeignClient можно использовать RestTemplate).
        // Каждому элементу из списка List<LoanOfferDTO> присваивается id созданной заявки (Application)
        val responseList = conveyorAppClient.requestLoanOffer(loanApplicationRequestDTO) ?: mutableListOf()
        log.trace { "Got loan offer list from Conveyor app: $responseList" }

        responseList.forEach(Consumer { a: LoanOfferDTO -> a.applicationId = newApplicationId })

        // 5.	Ответ на API - список из 4-х LoanOfferDTO от "худшего" к "лучшему".
        val loanComparator = Comparator.comparing(
            LoanOfferDTO::rate
        ) { obj: BigDecimal, `val`: BigDecimal? -> obj.compareTo(`val`) }.reversed()
        responseList.sortWith(loanComparator)
        return responseList
    }

    /**
     * Save new application to database basing on information about client.
     *
     * @param newClient client that requested new application.
     * @return id of saved application.
     * @throws IllegalStateException if new application isn't saved in database.
     */
    private fun saveNewApplicationToDatabase(newClient: ClientEntity): Long {
        log.trace { "Generating new application of client #${newClient.id} to database." }
        val newApplication = createNewApplication(newClient)
        log.trace { "Saving application '$newApplication' to database." }
        return applicationRepository.save(newApplication).id ?: error("Application is not saved in database!")
    }

    /**
     * Save new client entity based on given loan application request information.
     *
     * @param loanApplicationRequestDTO information about request.
     * @return saved [ClientEntity].
     */
    private fun saveNewClientToDatabase(loanApplicationRequestDTO: LoanApplicationRequestDTO): ClientEntity {
        val newClient = loanRequestToClient(loanApplicationRequestDTO)
        log.trace { "New client '$newClient' is generated from application request." }
        return clientRepository.save(newClient)
    }
}
